---
- name: Provisioning EC2 instance and setup Docker container
  hosts: localhost
  connection: local
  gather_facts: False
  tags: provisioning

  vars:
    keypair: demo
    instance_type: t2.micro
    image: ami-0e8d228ad90af673b  # Ensure this is valid for your region
    wait: yes
    group: webserver
    count: 1
    region: eu-west-2             # Ensure you are providing valid region
    security_group: ec2-security-group
    docker_tag: "latest"          # Specify the Docker image tag (or dynamic version)
  
  tasks:
    # Create a security group
    - name: Create a security group
      amazon.aws.ec2_security_group:
        name: "{{ security_group }}"
        description: Security Group for webserver Servers
        region: "{{ region }}"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 8080
            to_port: 8080
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 443
            to_port: 443
            cidr_ip: 0.0.0.0/0
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0
      register: basic_firewall

    # Launch the new EC2 Instance
    - name: Launch the new EC2 Instance
      amazon.aws.ec2_instance:
        key_name: "{{ keypair }}"
        instance_type: "{{ instance_type }}"
        image_id: "{{ image }}"
        region: "{{ region }}"
        security_group: "{{ security_group }}"
        count: "{{ count }}"
        wait: "{{ wait }}"
      register: ec2

    # Debug EC2 Instances
    - name: Debug EC2 Instances
      debug:
        var: ec2.instances

    # Add Tagging to EC2 instance
    - name: Add Tagging to EC2 instance
      amazon.aws.ec2_tag:
        resource: "{{ item.instance_id }}"
        region: "{{ region }}"
        state: present
        tags:
          Name: MyTargetEc2Instance
      with_items: "{{ ec2.instances }}"
      when: ec2.instances is defined and ec2.instances | length > 0

    # Wait for SSH on EC2 instance to become available
    - name: Wait for SSH on EC2 instance to become available
      wait_for:
        host: "{{ ec2.instances[0].public_ip }}"
        port: 22
        delay: 10
        timeout: 300
        state: started

    # Add new instance to Ansible inventory
    - name: Add new instance to Ansible inventory
      add_host:
        name: "{{ ec2.instances[0].public_ip }}"
        groups: launched

- name: Install Docker and Start Application on EC2 Instance
  hosts: launched
  become: True
  gather_facts: True
  tasks:
    # Install python pip
    - name: Install python pip
      yum:
        name: python-pip
        state: present

    # Install docker
    - name: Install docker
      yum:
        name: docker
        state: present

    # Start docker service
    - name: Start docker service
      service:
        name: docker
        state: started
        enabled: yes

    # Install docker-py python module
    - name: Install docker-py python module
      pip:
        name: docker-py
        state: present

    # Pull and Start the container on EC2 instance
    - name: Start the Docker container
      docker_container:
        name: rahulbbalu98
        image: "rahulbbalu98/sampleansibledocker:{{DOCKER_TAG}}"
        state: started
        published_ports:
          - "0.0.0.0:8080:8080"
